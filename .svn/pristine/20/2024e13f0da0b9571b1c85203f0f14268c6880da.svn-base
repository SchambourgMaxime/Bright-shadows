using UnityEngine;
using System.Collections;

public class PlayerController : MonoBehaviour
{

    public float walkSpeed = 5.0f;
    public float runSpeed = 7.0f;

    public float jumpSpeed = 15.0f;
    public float gravity = 10.0f;

    public Transform SocketPosition;
    public Transform TorchSpawnPosition;

    private int XP;
    private int level;

    public int palierLevelUp;

    private float life;
    public float baseLife;
    public float maxLife;

    // Use this for initialization
    private void Start()
    {
        life = baseLife;
        level = 1;
    }

    // Update is called once per frame
    private void Update()
    {

    }

    

    private void LevelUp()
    {

        GameObject TorchLight = GetComponentInChildren<TorchLightController>().gameObject;

        switch (level % 3)
        {
            case 0 :

                break;
            case 1 :
                break;
            case 2 :
                Light[] lightTab;
                switch (level)
                {
                    case 2 :
                        TorchLight.GetComponents<SphereCollider>()[0].radius = 0.9f;
                        TorchLight.GetComponents<SphereCollider>()[0].center = new Vector3(0.0f, 0.0f, 3.5f);

                        TorchLight.GetComponents<SphereCollider>()[1].radius = 0.5f;
                        TorchLight.GetComponents<SphereCollider>()[1].center = new Vector3(0.0f, 0.0f, 2.0f);

                        lightTab = TorchLight.GetComponentsInChildren<Light>();

                        if (lightTab[0].type == LightType.Spot)
                        {
                            lightTab[0].spotAngle = 30;
                            lightTab[0].range = 4;
                        }
                        else
                        {
                            lightTab[1].spotAngle = 30;
                            lightTab[1].range = 4;
                        }

                        lightTab[0].intensity = lightTab[1].intensity = 0.5f;

                        break;
                    case 5 :
                        TorchLight.GetComponents<SphereCollider>()[0].radius = 1.3f;
                        TorchLight.GetComponents<SphereCollider>()[0].center = new Vector3(0.0f, 0.0f, 3.9f);

                        TorchLight.GetComponents<SphereCollider>()[1].radius = 0.7f;
                        TorchLight.GetComponents<SphereCollider>()[1].center = new Vector3(0.0f, 0.0f, 2.0f);

                        lightTab = TorchLight.GetComponentsInChildren<Light>();

                        if (lightTab[0].type == LightType.Spot)
                        {
                            lightTab[0].spotAngle = 30;
                            lightTab[0].range = 4;
                        }
                        else
                        {
                            lightTab[1].spotAngle = 30;
                            lightTab[1].range = 4;
                        }

                        lightTab[0].intensity = lightTab[1].intensity = 0.5f;
                        break;
                    case 8 :
                         TorchLight.GetComponents<SphereCollider>()[0].radius = 1.7f;
                        TorchLight.GetComponents<SphereCollider>()[0].center = new Vector3(0.0f, 0.0f, 4.7f);

                        TorchLight.GetComponents<SphereCollider>()[1].radius = 0.8f;
                        TorchLight.GetComponents<SphereCollider>()[1].center = new Vector3(0.0f, 0.0f, 2.2f);

                        lightTab = TorchLight.GetComponentsInChildren<Light>();

                        if (lightTab[0].type == LightType.Spot)
                        {
                            lightTab[0].spotAngle = 45;
                            lightTab[0].range = 6;
                        }
                        else
                        {
                            lightTab[1].spotAngle = 30;
                            lightTab[1].range = 4;
                        }

                        lightTab[0].intensity = lightTab[1].intensity = 0.5f;
                        break;
                }
                break;
        }
    }

    public void GetItem(Transform item)
    {
        Transform newItem = Instantiate(item.transform, TorchSpawnPosition.position, item.transform.rotation) as Transform;
        AnimationHandler animationHandler = GetComponentInChildren<AnimationHandler>();
        animationHandler.activateIK = true;
        newItem.parent = animationHandler.transform;
    }

    public void loseLife(float lifeLost)
    {
        life -= lifeLost;
        if (life <= 0)
            UIManager.instance.GameOver();
    }

    public void KillReward(int XPGagne)
    {
        XP += XPGagne;
        if (XP > level * palierLevelUp)
            level++; // YEAH!
    }
}
